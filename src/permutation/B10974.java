package permutation;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;public class B10974 {    static int N;    static int[] output;    static boolean[] visit;    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        N = Integer.parseInt(br.readLine());        output = new int[N];        visit = new boolean[N];        int depth = 0;        int r = N;        permutation(output, visit, depth, N, r);    }    static void permutation(int[] output, boolean[] visit, int depth, int n, int r) {        if (depth == r) {            print(output, r);            return;        }        for (int i = 1; i <= n; i++) {            if (!visit[i - 1]) {                visit[i - 1] = true;                output[depth] = i;                permutation(output, visit, depth + 1, n, r);                visit[i - 1] = false;            }        }    }    static void print(int[] output, int r) {        for (int i = 0; i < r; i++) {            System.out.print(output[i] + " ");        }        System.out.println();    }}