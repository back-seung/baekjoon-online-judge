package dfs_bfs;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.LinkedList;import java.util.Queue;import java.util.Scanner;import java.util.StringTokenizer;public class B1012 {    // TC의 개수    static int T;    // 가로, 세로, 심어진 배추 개수    static int M, N, K;    static int count;    static boolean[][] graph;    static int[][] delta = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};    public static void main(String[] args) throws Exception {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        T = Integer.parseInt(br.readLine());        for (int tc = 0; tc < T; tc++) {            count = 0;            StringTokenizer st = new StringTokenizer(br.readLine(), " ");            M = Integer.parseInt(st.nextToken()); // 가로            N = Integer.parseInt(st.nextToken()); // 새로            K = Integer.parseInt(st.nextToken()); // 배추 수            graph = new boolean[M + 2][N + 2];            // 배열 초기화            for (int k = 1; k <= K; k++) {                st = new StringTokenizer(br.readLine(), " ");                int x = Integer.parseInt(st.nextToken()) + 1;                int y = Integer.parseInt(st.nextToken()) + 1;                graph[x][y] = true;            }            for (int row = 1; row <= M; row++) {                for (int col = 1; col <= N; col++) {                    if (graph[row][col]) {//                        dfs(row, col);                        bfs(row, col);                        count++;                    }                }            }            System.out.println(count);        }    }    static void dfs(int row, int col) {        graph[row][col] = false;        for (int i = 0; i < 4; i++) {            int newRow = row + delta[i][0];            int newCol = col + delta[i][1];            if (graph[newRow][newCol]) {                dfs(newRow, newCol);            }        }    }    static void bfs(int row, int col) {        Queue<int[]> queue = new LinkedList<>();        graph[row][col] = false;        queue.add(new int[]{row, col});        while (!queue.isEmpty()) {            // pos[0] = row, pos[1] = col            int[] pos = queue.poll();            for (int i = 0; i < 4; i++) {                int newRow = pos[0] + delta[i][0];                int newCol = pos[1] + delta[i][1];                if (graph[newRow][newCol]) {                    graph[newRow][newCol] = false;                    queue.add(new int[]{newRow, newCol});                }            }        }    }}