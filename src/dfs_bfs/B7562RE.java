package dfs_bfs;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.LinkedList;import java.util.Queue;import java.util.StringTokenizer;public class B7562RE {    static class Node {        int x;        int y;        public Node(int x, int y) {            this.x = x;            this.y = y;        }    }    static int line;    static int sX, sY, eX, eY;    static int[][] graph;    static int[][] D = {{-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {1, -2}, {2, -1}};    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int T = Integer.parseInt(br.readLine());        StringTokenizer st;        for (int i = 0; i < T; i++) {            line = Integer.parseInt(br.readLine());            graph = new int[line][line];            st = new StringTokenizer(br.readLine());            sX = Integer.parseInt(st.nextToken());            sY = Integer.parseInt(st.nextToken());            graph[sX][sY] = 1;            st = new StringTokenizer(br.readLine());            eX = Integer.parseInt(st.nextToken());            eY = Integer.parseInt(st.nextToken());            BFS(sX, sY);        }    }    static void BFS(int x, int y) {        Queue<Node> queue = new LinkedList();        queue.add(new Node(x, y));        while (!queue.isEmpty()) {            Node now = queue.poll();            if (now.x == eX && now.y == eY) {                System.out.println(graph[eX][eY] - 1);                break;            }            for (int i = 0; i < 8; i++) {                int newX = now.x + D[i][0];                int newY = now.y + D[i][1];                if (newX >= 0 && newX < line && newY >= 0 && newY < line) {                    if (graph[newX][newY] == 0) {                        queue.add(new Node(newX, newY));                        graph[newX][newY] = graph[now.x][now.y] + 1;                    }                }            }        }    }}