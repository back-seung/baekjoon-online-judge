package dfs_bfs;import java.util.LinkedList;import java.util.Queue;public class GameMap {    static int[][] maps;    static int[][] delta = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};    static int count;    static int answer;    static int N;    static int M;    public int solution(int[][] maps) {        N = maps.length;        M = maps[0].length;        answer = 0;        count = 0;        maps = maps;        bfs(1, 1);        return answer;    }    static void bfs(int row, int col) {        Queue<int[]> q = new LinkedList<>();        q.add(new int[]{row, col});        maps[row][col] = 0;        while (!q.isEmpty()) {            int[] arr = q.poll();            row = arr[0];            col = arr[1];            for (int i = 0; i < 4; i++) {                int nRow = row + delta[i][0];                int nCol = col + delta[i][1];                if (nRow < N && nRow > 0 && nCol < M && nCol > 0) {                    if (maps[nRow][nCol] == 1) {                        maps[nRow][nCol] = 0;                        q.add(new int[]{nRow, nCol});                        count++;                    }                }            }        }        answer = Math.min(answer, count);    }}