package dfs_bfs;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;public class B2644 {    static int N, from, to, M;  // 전체 사람수, 타겟 2, 관계 개수    static int[][] map;     // 촌수    static boolean[] visit;   // 방문처리    static int count = 0;       // 촌수 관계    static boolean find;    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        N = Integer.parseInt(br.readLine());        map = new int[N][N];        visit = new boolean[N];        StringTokenizer st = new StringTokenizer(br.readLine());        from = Integer.parseInt(st.nextToken()) - 1;        to = Integer.parseInt(st.nextToken()) - 1;        M = Integer.parseInt(br.readLine());        int row = 0;        int col = 0;        for (int i = 0; i < M; i++) {            st = new StringTokenizer(br.readLine());            row = Integer.parseInt(st.nextToken()) - 1;            col = Integer.parseInt(st.nextToken()) - 1;            map[row][col] = map[col][row] = 1;        }        DFS(from, to, 0);        if (!find) count = -1;        System.out.println(count);    }    public static void DFS(int row, int col, int cnt) {        visit[row] = true;        if (row == col) {            find = true;            count = cnt;            return;        }        for (int i = 0; i < N; i++) {            if (!visit[i] && map[row][i] == 1) {                visit[i] = true;                DFS(i, col, cnt + 1);                visit[i] = false;            }        }    }}