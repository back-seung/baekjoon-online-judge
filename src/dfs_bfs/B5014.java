package dfs_bfs;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.LinkedList;import java.util.Queue;import java.util.StringTokenizer;public class B5014 {    static int floor, start, ground, up, down;    static int[] floors = new int[1_000_001];    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer(br.readLine());        floor = Integer.parseInt(st.nextToken());        start = Integer.parseInt(st.nextToken());        ground = Integer.parseInt(st.nextToken());        up = Integer.parseInt(st.nextToken());        down = Integer.parseInt(st.nextToken());        BFS(start);    }    public static void BFS(int start) {        Queue<Integer> q = new LinkedList<>();        floors[start] = 1;        q.add(start);        while (!q.isEmpty()) {            int current = q.poll();            if (current == ground) {                System.out.println(floors[ground] - 1);            }            for (int i = 0; i < 2; i++) {                int temp = current;                switch (i) {                    case 0:                        temp += up;                        break;                    case 1:                        temp -= down;                        break;                }                if (temp <= floor && temp > 0 && floors[temp] == 0) {                    q.add(temp);                    floors[temp] = floors[current] + 1;                }            }        }        if (floors[ground] == 0) {            System.out.println("use the stairs");        }    }}