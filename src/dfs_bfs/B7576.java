package dfs_bfs;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.LinkedList;import java.util.Queue;public class B7576 {    static int M, N;    static int[][] map;    static int[][] pos = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};    static Queue<int[]> queue = new LinkedList<>();    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        String[] MN = br.readLine().split(" ");        M = Integer.parseInt(MN[0]);        N = Integer.parseInt(MN[1]);        map = new int[N][M];        for (int i = 0; i < N; i++) {            String[] line = br.readLine().split(" ");            for (int j = 0; j < M; j++) {                map[i][j] = Integer.parseInt(line[j]);                if (line[j].equals("1")) {                    queue.add(new int[]{i, j});                }            }        }        bfs();    }    public static void bfs() {        while (!queue.isEmpty()) {            int[] rowcol = queue.poll();            int row = rowcol[0];            int col = rowcol[1];            for (int i = 0; i < 4; i++) {                int newRow = row + pos[i][0];                int newCol = col + pos[i][1];                if (newRow < N && newRow >= 0 && newCol < M && newCol >= 0) {                    if (map[newRow][newCol] == 0) {                        map[newRow][newCol] += map[row][col] + 1;                        queue.add(new int[]{newRow, newCol});                    }                }            }        }        int max = Integer.MIN_VALUE;        for (int i = 0; i < N; i++) {            for (int j = 0; j < M; j++) {                if (map[i][j] == 0) {                    System.out.println(-1);                    return;                }                max = Math.max(max, map[i][j]);            }        }        System.out.println(max - 1);    }}