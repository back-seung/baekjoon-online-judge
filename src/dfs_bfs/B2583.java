package dfs_bfs;import java.io.*;import java.util.*;public class B2583 {    static int M, N, K;    static boolean[][] graph;    static int[][] D = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};    static int count;    public static void main(String[] args) throws Exception {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer(br.readLine(), " ");        M = Integer.parseInt(st.nextToken());        N = Integer.parseInt(st.nextToken());        K = Integer.parseInt(st.nextToken());        graph = new boolean[M][N];        for (int i = 0; i < K; i++) {            st = new StringTokenizer(br.readLine(), " ");            int x1 = Integer.parseInt(st.nextToken());            int y1 = Integer.parseInt(st.nextToken());            int x2 = Integer.parseInt(st.nextToken());            int y2 = Integer.parseInt(st.nextToken());            for (int j = y1; j < y2; j++) {                for (int k = x1; k < x2; k++) {                    graph[j][k] = true;                }            }        }        List<Integer> list = new ArrayList<>();        for (int i = 0; i < graph.length; i++) {            for (int j = 0; j < graph[i].length; j++) {                if (!graph[i][j]) {                    count = 0;                    dfs(i, j);                    list.add(count);                }            }        }        System.out.println(list.size());        Collections.sort(list);        for (int i : list) {            System.out.print(i + " ");        }    }    static void dfs(int row, int col) {        graph[row][col] = true;        count++;        for (int i = 0; i < 4; i++) {            int newRow = row + D[i][0];            int newCol = col + D[i][1];            if (!(newRow >= 0 && newRow < M && newCol >= 0 && newCol < N)) {                continue;            }            if (!graph[newRow][newCol]) {                dfs(newRow, newCol);            }        }    }}