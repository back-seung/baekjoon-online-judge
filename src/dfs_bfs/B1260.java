package dfs_bfs;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.LinkedList;import java.util.Queue;import java.util.StringTokenizer;public class B1260 {    static int N, M, V;    static int[][] graph;    static boolean[] visit;    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer(br.readLine(), " ");        N = Integer.parseInt(st.nextToken());        M = Integer.parseInt(st.nextToken());        V = Integer.parseInt(st.nextToken());        graph = new int[N + 1][N + 1];        visit = new boolean[N + 1];        for (int i = 1; i <= M; i++) {            String[] s = br.readLine().split(" ");            int row = Integer.parseInt(s[0]);            int col = Integer.parseInt(s[1]);            graph[row][col] = graph[col][row] = 1;        }        for (int i = 0; i < graph.length; i++) {            for (int j = 0; j < graph[i].length; j++) {                System.out.print(graph[i][j] + " ");            }            System.out.println();        }        bfs(V);    }    static void dfs(int V) {        visit[V] = true;        System.out.print(V + " ");        for (int i = 1; i <= N; i++) {            if (!visit[i] && graph[V][i] == 1) {                dfs(i);            }        }    }    static void bfs(int V) {        Queue<Integer> queue = new LinkedList<>();        queue.add(V);        visit[V] = true;        System.out.print(V + " ");        while (!queue.isEmpty()) {            V = queue.poll();            for (int i = 1; i <= N; i++) {                if (!visit[i] && graph[V][i] == 1) {                    visit[i] = true;                    queue.add(i);                    System.out.print(i + " ");                }            }        }    }}