package dfs_bfs;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.LinkedList;import java.util.Queue;import java.util.StringTokenizer;public class B2178 {    static int N, M;    static boolean[][] graph;    static int[][] dis;    static int[][] D = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};    public static void main(String[] args) throws Exception {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer(br.readLine());        N = Integer.parseInt(st.nextToken());        M = Integer.parseInt(st.nextToken());        graph = new boolean[N + 2][M + 2];        dis = new int[N + 2][M + 2];        for (int i = 1; i <= N; i++) {            String map = br.readLine();            for (int j = 1; j <= map.length(); j++) {                graph[i][j] = map.charAt(j - 1) == '1';            }        }        dis[1][1] = 1;        bfs(1, 1);        for (int i = 0; i < N + 2; i++) {            for (int j = 0; j < M + 2; j++) {                System.out.print(dis[i][j] + " ");            }            System.out.println();        }        System.out.println(dis[N][M]);    }    static void bfs(int row, int col) {        Queue<int[]> q = new LinkedList<>();        q.add(new int[]{row, col});        while (!q.isEmpty()) {            int[] arr = q.poll();            row = arr[0];            col = arr[1];            graph[row][col] = false;            for (int i = 0; i < 4; i++) {                int nRow = row + D[i][0];                int nCol = col + D[i][1];                if (graph[nRow][nCol]) {                    graph[nRow][nCol] = false;                    q.add(new int[]{nRow, nCol});                    dis[nRow][nCol] = dis[row][col] + 1;                }            }        }    }}