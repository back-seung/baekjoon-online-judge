package dfs_bfs;import java.util.List;public class Stamina {    static boolean[] visit;    List<Integer> list;    static int count = 0;    public static int solution(int k, int[][] dungeons) {        visit = new boolean[dungeons.length];        dfs(k, dungeons);        System.out.println(count);        return count;    }    static void dfs(int k, int[][] dungeons) {        for (int i = 0; i < dungeons.length; i++) {            int need = dungeons[i][0]; // 필요 피로도            int cost = dungeons[i][1]; // 소모 피로도            if (!visit[i] && need <= k) { // 방문하지 않고 k가 필요 피로도보다 많이 남아있으면                visit[i] = true; // 방문처리                dfs(k - cost, dungeons); // (k - 소모 피로도)하여 다시 탐색                count++;            }        }    }    public static void main(String[] args) {        int k = 80;        int[][] dungeons = {{80, 20}, {50, 40}, {30, 10}};        solution(k, dungeons);    }}