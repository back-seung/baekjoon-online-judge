package dfs_bfs;import java.io.*;import java.util.*;public class B7562 {    static int TC, L;    static boolean[][] visit;    static int[][] map;    static int[][] move = {{-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {1, -2}, {2, -1}};    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        TC = Integer.parseInt(br.readLine());        for (int i = 0; i < TC; i++) {            L = Integer.parseInt(br.readLine());            String[] start = br.readLine().split(" ");            String[] end = br.readLine().split(" ");            if (start[0].equals(end[0]) && start[1].equals(end[1])) {                System.out.println(0);                continue;            }            visit = new boolean[L][L];            visit[Integer.parseInt(start[0])][Integer.parseInt(start[1])] = true;            map = new int[L][L];            map[Integer.parseInt(start[0])][Integer.parseInt(start[1])] = 1;            BFS(Integer.parseInt(start[0]), Integer.parseInt(start[1]), end);        }    }    public static void BFS(int row, int col, String[] endPoint) {        Queue<int[]> queue = new LinkedList<>();        queue.add(new int[]{row, col});        visit[row][col] = true;        while (!queue.isEmpty()) {            int[] rc = queue.poll();            row = rc[0];            col = rc[1];            if (row == Integer.parseInt(endPoint[0]) && col == Integer.parseInt(endPoint[1])) {                System.out.println(map[Integer.parseInt(endPoint[0])][Integer.parseInt(endPoint[1])] - 1);            }            for (int i = 0; i < move.length; i++) {                int newRow = row + move[i][0];                int newCol = col + move[i][1];                if (newRow >= 0 && newRow < L && newCol >= 0 && newCol < L) {                    if (!visit[newRow][newCol] && map[newRow][newCol] == 0) {                        queue.add(new int[]{newRow, newCol});                        map[newRow][newCol] = map[row][col] + 1;                        visit[newRow][newCol] = true;                    }                }            }        }    }}