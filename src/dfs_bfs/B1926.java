package dfs_bfs;import java.util.LinkedList;import java.util.Queue;import java.util.Scanner;public class B1926 {    // 가로, 세로    static int N, M;    static boolean[][] graph;    static int[][] D = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};    static int count;    static int numOfPaint;    static int max;    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        N = sc.nextInt();        M = sc.nextInt();        graph = new boolean[N + 2][M + 2];        for (int i = 1; i <= N; i++) {            for (int j = 1; j <= M; j++) {                int torf = sc.nextInt();                if (torf == 1) {                    graph[i][j] = true;                }            }        }        for (int i = 0; i <= N; i++) {            for (int j = 0; j <= M; j++) {                System.out.print(graph[i][j] + " ");            }            System.out.println();        }        for (int i = 1; i <= N; i++) {            for (int j = 1; j <= M; j++) {                if (graph[i][j]) {                    numOfPaint++;                    count = 1;                    System.out.println("[" + (i - 1) + ", " + (j - 1) + "]");                    bfs(i, j);                }            }        }        System.out.println(numOfPaint);        System.out.println(max);    }    static void dfs(int row, int col) {        graph[row][col] = false;        for (int i = 0; i < 4; i++) {            int nRow = row + D[i][0];            int nCol = col + D[i][1];            if (graph[nRow][nCol]) {                System.out.println("[" + (nRow - 1) + ", " + (nCol - 1) + "]");                dfs(nRow, nCol);                count++;            }        }        max = Math.max(count, max);    }    static void bfs(int row, int col) {        Queue<int[]> queue = new LinkedList<>();        graph[row][col] = false;        queue.add(new int[]{row, col});        while (!queue.isEmpty()) {            int[] pos = queue.poll();            row = pos[0];            col = pos[1];            for (int i = 0; i < 4; i++) {                int nRow = row + D[i][0];                int nCol = col + D[i][1];                if (graph[nRow][nCol]) {                    graph[nRow][nCol] = false;                    queue.add(new int[]{nRow, nCol});                    count++;                }            }        }        max = Math.max(count, max);    }}