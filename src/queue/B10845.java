package queue;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;// 큐public class B10845 {    static int TC;    static int[] queue;    static int head = 0;    static int tail = 0;    static void push(int x) {        queue[tail++] = x;    }    static int pop() {        if (tail - head == 0) return -1;        int num = queue[head];        head++;        return num;    }    static int size() {        return tail - head;    }    static int empty() {        if (tail - head == 0) return 1;        return 0;    }    static int front() {        if (tail - head == 0) return -1;        return queue[head];    }    static int back() {        if (tail - head == 0) return -1;        return queue[tail - 1];    }    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        TC = Integer.parseInt(br.readLine());        queue = new int[TC];        for (int i = 0; i < TC; i++) {            String[] cmd = br.readLine().split(" ");            switch (cmd[0]) {                case "push":                    push(Integer.parseInt(cmd[1]));                    break;                case "pop":                    System.out.println(pop());                    break;                case "size":                    System.out.println(size());                    break;                case "empty":                    System.out.println(empty());                    break;                case "front":                    System.out.println(front());                    break;                case "back":                    System.out.println(back());                    break;            }        }    }}