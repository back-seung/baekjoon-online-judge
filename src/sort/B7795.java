package sort;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;/*심해에는 두 종류의 생명체 A와 B가 존재한다.A는 B를 먹는다.A는 자기보다 크기가 작은 먹이만 먹을 수 있다.예를 들어, A의 크기가 {8, 1, 7, 3, 1}이고, B의 크기가 {3, 6, 1}인 경우에 A가 B를 먹을 수 있는 쌍의 개수는 7가지가 있다.8-3, 8-6, 8-1, 7-3, 7-6, 7-1, 3-1두 생명체 A와 B의 크기가 주어졌을 때, A의 크기가 B보다 큰 쌍이 몇 개나 있는지 구하는 프로그램을 작성하시오.첫째 줄에 테스트 케이스의 개수 T가 주어진다.각 테스트 케이스의 첫째 줄에는 A의 수 N과 B의 수 M이 주어진다.둘째 줄에는 A의 크기가 모두 주어지며, 셋째 줄에는 B의 크기가 모두 주어진다.크기는 양의 정수이다. (1 ≤ N, M ≤ 20,000)*/public class B7795 {    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        final int TEST_CASE = Integer.parseInt(br.readLine());        for (int i = 0; i < TEST_CASE; i++) {            StringTokenizer st = new StringTokenizer(br.readLine());            int N = Integer.parseInt(st.nextToken());            int M = Integer.parseInt(st.nextToken());            int[] A = new int[N];            int[] B = new int[M];            st = new StringTokenizer(br.readLine());            for (int j = 0; j < N; j++) {                A[j] = Integer.parseInt(st.nextToken());            }            st = new StringTokenizer(br.readLine());            for (int j = 0; j < M; j++) {                B[j] = Integer.parseInt(st.nextToken());            }            Arrays.sort(B);            int eatCount = 0;            for (int j = 0; j < N; j++) {                eatCount += binarySearch(A[j], B);            }            System.out.println(eatCount);        }    }    static int binarySearch(int given, int[] array) {        int start = 0;        int end = array.length - 1;        int index = 0;        while (start <= end) {            int mid = (start + end) / 2;            if (array[mid] < given) {                start = mid + 1;                index = mid + 1;            } else {                end = mid - 1;            }        }        return index;    }}