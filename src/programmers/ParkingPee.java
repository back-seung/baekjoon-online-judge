package programmers;import java.util.*;import java.text.*;class ParkingPee {    static String time;    static String carNum;    static String inOut;    static SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");    public int[] solution(int[] fees, String[] records) throws ParseException {        Map<String, Long> map = new HashMap<>();        Map<String, Long> resultMap = new HashMap<>();        StringTokenizer st;        for(int i = 0; i < records.length; i++) {            st = new StringTokenizer(records[i], " ");            time = st.nextToken();            carNum =  st.nextToken();            inOut = st.nextToken();            if(inOut.equals("IN")) {                map.put(carNum, convertTimeToLong(time));            } else {                long diffMin = (convertTimeToLong(time) - map.get(carNum)) / 60000;                map.remove(carNum);                resultMap.put(carNum, resultMap.getOrDefault(carNum, 0l) + diffMin);            }        }        for (String key : map.keySet()) {            long diffMin = (convertTimeToLong("23:59") - map.get(key)) / 60000;            resultMap.put(key, resultMap.getOrDefault(key, 0l) + diffMin);        }        List<String> keySet = new ArrayList<>(resultMap.keySet());        Collections.sort(keySet);        List<Integer> list = new ArrayList<>();        for(String key : keySet) {            int parkCost = Integer.parseInt(String.valueOf(getTotalCost(fees, resultMap.get(key))));            list.add(parkCost);        }        return list.stream().mapToInt(Integer::intValue).toArray();    }    public long convertTimeToLong(String time) throws ParseException {        long min = sdf.parse(time).getTime();        return min;    }    public long getTotalCost(int[] fees, Long min) {        long defaultTime = Long.parseLong(String.valueOf(fees[0]));        long defaultCost = Long.parseLong(String.valueOf(fees[1]));        long unitTime = Long.parseLong(String.valueOf(fees[2]));        long unitCost = Long.parseLong(String.valueOf(fees[3]));        if(min <= defaultTime) {            return defaultCost;        }        min -= defaultTime;        long cost = defaultCost;        if(min % unitTime > 0) {            cost += ((min / unitTime) + 1) * unitCost;        } else {            cost += (min / unitTime) * unitCost;        }        return cost;    }}