package programmers;import java.util.*;class GameMapMinDirection {    static int[][] map;    static boolean[][] visit;    static int N, M;    static int[][] D = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};    static class Node {        int row;        int col;        public Node(int row, int col) {            this.row = row;            this.col = col;        }    }    public int solution(int[][] maps) {        int answer = 0;        map = maps;        N = map.length;        M = map[0].length;        visit = new boolean[N][M];        for (int i = 0; i < N; i++) {            for (int j = 0; j < M; j++) {                if (map[i][j] == 1 && !visit[i][j]) {                    BFS(i, j);                }            }        }        if (map[N - 1][M - 1] < (N + M) - 1) return -1;        return map[N - 1][M - 1];    }    public void BFS(int row, int col) {        Queue<Node> queue = new LinkedList<>();        queue.add(new Node(row, col));        while (!queue.isEmpty()) {            Node node = queue.poll();            row = node.row;            col = node.col;            visit[row][col] = true;            for (int i = 0; i < D.length; i++) {                int nRow = row + D[i][0];                int nCol = col + D[i][1];                if (nRow >= 0 && nRow < N && nCol >= 0 && nCol < M) {                    if (map[nRow][nCol] == 1 && !visit[nRow][nCol]) {                        queue.add(new Node(nRow, nCol));                        map[nRow][nCol] = map[row][col] + 1;                    }                }            }        }    }    public static void main(String[] args) {        GameMapMinDirection n = new GameMapMinDirection();        n.solution(new int[][]{{1, 0, 1, 1, 1}, {1, 0, 1, 0, 1}, {1, 0, 1, 1, 1}, {1, 1, 1, 0, 1}, {0, 0, 0, 0, 1}});    }}